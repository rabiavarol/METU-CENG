
    #/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# RABÄ°A VAROL	
# 2237881
# Describe how and why you modified the baseline code.
#
# By using IIADDQ, I can avoid using irmovq and addq because in iaddq 
# we can add immediate value to the register value(valB) and then write 
# back this result to the same register again(rB).
# I try to use 8 way loop unrolling. To the arrays with length greater than 8,
# I read 8 values from the related memory address (src) 
# and copy them and then, I move values from registers to the related memory address (dst)
# Then I incremented src, dst by 64 and decrement len and len-8. After this process,
# I control this 8 values whether they are positive or not and base on that I increment count

# For the ones with length less than 8, I implement a loop that handles one by one read from src,
# move to dst and control positiveness.

# BUT I cannot succesive on this idea :(
#/* */

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
# Loop header
	#xorq %rax, %rax		# count = 0;
	andq %rdx, %rdx     # len > 0 ?
	jg check_len_loop 	# if so, go to do more length checking 
	ret
check_len_loop:
    rrmovq %rdx, %r8    # tmp = len
    iaddq $-8, %r8 		# tmp = len - 8
	jle check_next		# array with length less than 8
biggers_loop: 
	# Read 8 values from the related memory address (src) and copy them 
	mrmovq (%rdi), %rcx
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rbx
	# Move values from registers to the related memory address (dst)
	rmmovq %rcx, (%rsi)
	rmmovq %r9, 8(%rsi)
    rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rbx, 56(%rsi)
	iaddq $64, %rdi         # src++
    iaddq $64, %rsi         # dst++
    iaddq $-8, %rdx         # len--
    iaddq $-8, %r8          # (len-8)--
	# check the values whether they are negative or positive
	val1:
		andq %rcx, %rcx
		jle val2		    # if val1 <= 0 then goto the next value
		iaddq $1, %rax		# else count++
	val2:
		andq %r9, %r9          
	    jle val3
	    iaddq $1, %rax
	val3:   
		andq %r10, %r10
		jle val4
	    iaddq $1, %rax
	val4:   
		andq %r11, %r11
	    jle val5
	    iaddq $1, %rax
	val5:   
		andq %r12, %r12
	    jle val6
	    iaddq $1, %rax
	val6:   
		andq %r13, %r13
	    jle val7
	    iaddq $1, %rax
	val7:   
		andq %r14, %r14
	    jle val8
	    iaddq $1, %rax
	val8:   
		andq %rbx, %rbx
		jle check_again_after_8_vals
    	iaddq $1, %rax
check_again_after_8_vals:  
	andq %r8,%r8			# len-8 >0
    jg biggers_loop         # if so, goto biggers_loop:
check_next:  
	andq %rdx,%rdx          # len <= 0?
    jle Done                # if so, goto Done:
smallers_loop:	
	mrmovq (%rdi), %rbx	   # read val from src...
	rmmovq %rbx, (%rsi)	   # ...and store it to dst
	andq %rbx, %rbx		   # val <= 0?
	jle smallers_pos	   # if so, goto smallers_pos
	iaddq $1, %rax		   # count++
smallers_pos:	
	iaddq $8, %rdi		    # src++
	iaddq $8, %rsi		    # dst++
	iaddq $-1, %rdx         # len--
    jg smallers_loop		# if so, goto smallers_loop

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
